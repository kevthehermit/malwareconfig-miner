import logging
import requests
import bs4  # we use bs4 to parse the HTML page

from minemeld.ft.basepoller import BasePollerFT

LOG = logging.getLogger(__name__)


class Miner(BasePollerFT):
    def configure(self):
        super(Miner, self).configure()

        self.polling_timeout = self.config.get('polling_timeout', 20)
        self.verify_cert = self.config.get('verify_cert', True)

        self.url = 'https://malwareconfig.com/static/C2_All.csv'


    def _build_iterator(self, item):
        # builds the request and retrieves the page
        rkwargs = dict(
            stream=False,
            verify=self.verify_cert,
            timeout=self.polling_timeout
        )

        r = requests.get(
            self.url,
            **rkwargs
        )

        try:
            r.raise_for_status()
        except:
            LOG.debug('%s - exception in request: %s %s',
                      self.name, r.status_code, r.content)
            raise

        # parse the page
        result = []
        for line in r.content.split('\n'):
            # Ignore commmented Lines
            if not line.startswith('#'):
                result.append(line)

        return result

    def _process_item(self, item):
        try:
            ip, domain, malware, hash = item.split(',')
        except:
            LOG.error('%s - Unable to parse fields from C2 List', self.name)
            return []

        indicator_list = []

        if ip is not 'None':
            indicator = ip
            value = {
                'type': 'IP',
                'confidence': 50,
                'Malware': malware,
                'MD5': hash,
                'Domain': domain,
                'IP': ip
            }
            indicator_list.append([indicator, value])

        if len(domain) > 2:
            if '/' in domain:
                value_type = 'URL'
            else:
                value_type = 'Domain'
            indicator = domain
            value = {
                'type': value_type,
                'confidence': 80,
                'Malware': malware,
                'MD5': hash,
                'Domain': domain,
                'IP': ip
            }
            indicator_list.append([indicator, value])

        if hash is not 'None':
            indicator = hash
            value = {
                'type': 'MD5',
                'confidence': 100,
                'Malware': malware,
                'MD5': hash,
                'Domain': domain,
                'IP': ip
            }
            indicator_list.append([indicator, value])

        return indicator_list
