import logging
import requests
import bs4  # we use bs4 to parse the HTML page

from minemeld.ft.basepoller import BasePollerFT

LOG = logging.getLogger(__name__)


class Miner(BasePollerFT):
    def configure(self):
        super(Miner, self).configure()

        self.polling_timeout = self.config.get('polling_timeout', 20)
        self.verify_cert = self.config.get('verify_cert', True)

        self.output_type = self.config.get('output_type')
        if self.output_type.lower() not in ['domain', 'ip', 'url', 'md5']:
            raise ValueError('%s - Output type must be one of domain, ip, url, md5' % self.name)

        self.url = 'https://malwareconfig.com/static/C2_All.csv'


    def _build_iterator(self, item):
        # builds the request and retrieves the page
        rkwargs = dict(
            stream=False,
            verify=self.verify_cert,
            timeout=self.polling_timeout
        )

        r = requests.get(
            self.url,
            **rkwargs
        )

        try:
            r.raise_for_status()
        except:
            LOG.debug('%s - exception in request: %s %s',
                      self.name, r.status_code, r.content)
            raise

        # parse the page
        result = []
        for line in r.content.split('\n'):
            # Ignore commmented Lines
            if not line.startswith('#'):
                result.append(line)

        return result

    def _process_item(self, item):
        try:
            ip, domain, malware, filehash, analysis_url, dateseen = item.split(',')
        except:
            LOG.error('%s - Unable to parse fields from C2 List', self.name)
            return []

        indicator_list = []

        if self.output_type.lower() == 'ip':
            if ip is not 'None':
                indicator = ip
                value = {
                    'type': 'IP',
                    'confidence': 50,
                    'IP': ip,
                    'Domain': domain,
                    'filehash': filehash,
                    'malware': malware,
                    'Report': analysis_url,
                    'Seen': dateseen
                }
                indicator_list.append([indicator, value])

        if self.output_type.lower() in ['domain']:
            if len(domain) > 2:
                if '/' in domain:
                    pass
                else:
                    indicator = domain
                    value = {
                        'type': 'Domain',
                        'confidence': 80,
                        'IP': ip,
                        'Domain': domain,
                        'filehash': filehash,
                        'malware': malware,
                        'Report': analysis_url,
                        'Seen': dateseen
                    }
                    indicator_list.append([indicator, value])

        if self.output_type.lower() in ['url']:
            if len(domain) > 2:
                indicator = domain
                value = {
                    'type': 'URL',
                    'confidence': 80,
                    'IP': ip,
                    'Domain': domain,
                    'filehash': filehash,
                    'malware': malware,
                    'Report': analysis_url,
                    'Seen': dateseen
                }
                indicator_list.append([indicator, value])


        if self.output_type.lower() == 'md5':
            indicator = hash
            value = {
                'type': 'MD5',
                'confidence': 100,
                'IP': ip,
                'Domain': domain,
                'filehash': filehash,
                'malware': malware,
                'Report': analysis_url,
                'Seen': dateseen
            }
            indicator_list.append([indicator, value])

        return indicator_list
